#!/usr/bin/env python
"""
Usage: delayed_deg_script.py [out_fname] [-f out_fname] [-o]

This script sets up the delayed protein degradation (clock) system,
runs it with the specified parameters, and writes the result to a file.

The parameter 'out_fname' specifies the name of the file to which to
write results (as a NumPy zipped array collection). If '-o' is
specified, the file will be overwritten if it exists.

"""


import sys
import os

import numpy as np
from numpy import random

import ssad
import ensemble as we


# Adjustable parameters
rxn_params = {
    'k_plus': 100,
    'k_minus': 3,
    'k_delayed': 1,
    'tau_delay': 20,
    }

ens_params = {
    'ntrajs': 40,
    'nbins': 30,
    'binrange': (0, 60),
    'step_time': 2.0,
    'tot_time': 60.0,
    'bin_pop_range': (4, 4),
    'resample': True,
    'num_ens': 100,
    }
# Note: With current parameters, 20 minutes on one core.


def parse_options(args):
    """
    Parse command-line options regarding file output.

    Returns the name of the file to be written.

    """
    fname_default = 'delayed_deg_output.npz'
    if len(args) == 1:
        out_fname = fname_default
    elif not args[1].startswith('-'):
        out_fname = args[1]
    elif '-f' in args:
        fl_idx = args.index('-f')
        if len(args) < fl_idx + 2:
            print(__doc__)
            raise RuntimeError("Must specify the output filename with '-f'.")
        else:
            out_fname = args[fl_idx + 1]
    else:
        out_fname = fname_default
    if '-o' in args:
        overwrite = True
    else:
        overwrite = False
    if not overwrite and os.path.isfile(out_fname):
        raise RuntimeError("File " + out_fname + " exists.\n" +
                           "To overwrite, pass the '-o' option.")
    else:
        return out_fname

def setup_reactions(rxn_params):
    """Return the system of reactions to be simulated."""
    rxns = [ssad.Reaction([0], [+1], rxn_params['k_plus']),
            ssad.Reaction([1], [-1], rxn_params['k_minus']),
            ssad.Reaction([1], [-1], rxn_params['k_delayed'],
                          delay=rxn_params['tau_delay'])]
    return rxns

def run_ensembles(rxns, ens_params):

    """
    Run several weighted ensembles for this system and gather statistics.

    Parameters:
        rxns        The list of reactions defining the system
        ens_params  Dictionary of ensemble options

    Returns a dict of arrays.
    The array 'bin_xs' is the array of x-positions at which the bins
    start.
    The array 'prob_dists' is an MxN array (N is the number of bins, M
    is the number of ensembles) containing the probability distributions
    generated by each ensemble at the end of the run time.
    The array 'tot_times' contains the total run time for each ensemble.

    """

    binrange = ens_params['binrange']
    bin_xs, bin_width = np.linspace(*binrange,
                                    num=ens_params['nbins'],
                                    endpoint=False,
                                    retstep=True)
    paving = we.UniformPaving(*binrange, bin_counts=ens_params['nbins'])

    prob_dists = np.zeros((ens_params['num_ens'], ens_params['nbins']))
    tot_times = np.empty((ens_params['num_ens']))
    for ens_idx in range(ens_params['num_ens']):
        # Create seed trajectories with random initial conditions and phases
        init_trjs = []
        for idx in range(ens_params['ntrajs']):
            init_state = random.randint(*binrange)
            init_time = random.random_sample() * rxn_params['tau_delay']
            init_trjs.append(we.WeightedTrajectory(
                [init_state], rxns, 1.0 / ens_params['ntrajs'],
                init_time=init_time))
        ens = we.Ensemble(ens_params['step_time'],
                          paving,
                          ens_params['bin_pop_range'],
                          init_trjs)
        tot_time = ens.run_time(ens_params['tot_time'])
        tot_times[ens_idx] = tot_time
        pdist = ens.get_pdist()
        prob_dists[ens_idx, ...] = pdist

    result = {'bin_xs': bin_xs,
              'prob_dists': prob_dists,
              'tot_times': tot_times,
              }
    return result


if __name__ == "__main__":
    fname = parse_options(sys.argv)
    rxns = setup_reactions(rxn_params)
    result = run_ensembles(rxns, ens_params)
    np.savez(fname, rxn_params=rxn_params, **result)
